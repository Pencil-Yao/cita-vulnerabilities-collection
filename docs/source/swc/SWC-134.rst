SWC-134
========

标题
----

SWC-134 硬编码gas用量的消息调用（Message call with hardcoded gas
amount）

漏洞等级
--------

中

描述
----

``transfer()``\ 和\ ``send()``\ 函数会转发固定的2300
gas。从历史上看，通常建议使用这些功能进行价值转移，以防止重入攻击。但是，EVM指令的gas成本在硬分叉期间可能会发生重大变化，这可能会破坏已经部署的对gas成本做出固定假设的合约系统。例如。由于SLOAD指令的成本增加，\ `EIP
1884 <https://eips.ethereum.org/EIPS/eip-1884>`__\ 破坏了几个现有的智能合约。

CWE漏洞分类
-----------

`CWE-655：不正确的初始化 <https://cwe.mitre.org/data/definitions/665.html>`__

修改建议
--------

在执行调用时，请避免使用\ ``transfer()``\ 和\ ``send()``\ 并且不要以其他方式指定固定的gas量。使用\ ``.call.value(...)("")``\ 代替。使用
checks-effects-interactions 模式和/或可重入锁来防止重入攻击。

参考链接
--------

-  `ChainSecurity -
   以太坊伊斯坦布尔分叉：安全性观点 <https://docs.google.com/presentation/d/1IiRYSjwle02zQUmWId06Bss8GrxGyw6nQAiZdCRFEPk/>`__
-  `Steve Marx -
   马上停止使用Solidity的transfer() <https://diligence.consensys.net/blog/2019/09/stop-using-soliditys-transfer-now/>`__
-  `EIP 1884 <https://eips.ethereum.org/EIPS/eip-1884>`__

案例
----

hardcoded_gas_limits.sol
~~~~~~~~~~~~~~~~~~~~~~~~

::

   /*
    * @author: Bernhard Mueller (ConsenSys / MythX)
    */

   pragma solidity 0.6.4;

   interface ICallable {
       function callMe() external;
   }

   contract HardcodedNotGood {

       address payable _callable = 0xaAaAaAaaAaAaAaaAaAAAAAAAAaaaAaAaAaaAaaAa;
       ICallable callable = ICallable(_callable);

       constructor() public payable {
       }

       function doTransfer(uint256 amount) public {
           _callable.transfer(amount);
       }

       function doSend(uint256 amount) public {
           _callable.send(amount);
       }

        function callLowLevel() public {
            _callable.call.value(0).gas(10000)("");
        }

        function callWithArgs() public {
            callable.callMe{gas: 10000}();
        }
   }
