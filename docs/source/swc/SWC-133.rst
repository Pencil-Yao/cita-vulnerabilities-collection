SWC-133 Hash Collisions With Multiple Variable Length Arguments
========

标题
----

SWC-133 变长参数导致的哈希冲突（Hash Collisions With Multiple Variable Length Arguments）

漏洞等级
--------

低

描述
----

``abi.encodePacked()``\ 在某些情况下，使用多个可变长度参数可能会导致哈希冲突。由于\ ``abi.encodePacked()``\ 将所有元素按顺序打包，而不管它们是否属于数组的一部分，因此可以在数组之间移动元素，并且只要所有元素的顺序相同，它将返回相同的编码。在签名验证情况下，攻击者可以通过修改先前函数调用中元素的位置来有效利用绕过授权，从而利用此漏洞。

CWE漏洞分类
-----------

`CWE-294：通过捕获-重放绕过身份验证 <https://cwe.mitre.org/data/definitions/294.html>`__

修改建议
--------

使用\ ``abi.encodePacked()``\ 时，至关重要的是要确保使用不同的参数无法获得匹配的签名。为此，要么不允许用户访问在\ ``abi.encodePacked()``\ 中使用的参数，要么使用固定长度的数组。另外，你也可以简单地使用\ ``abi.encode()``\ 。

此外，还建议使用重放保护（见SWC-121），虽然攻击者仍然可以利用
front-running（见SWC-114）绕过。

参考链接
--------

-  `Solidity非标准打包模式 <https://solidity.readthedocs.io/en/v0.5.3/abi-spec.html#non-standard-packed-mode>`__
-  `哈希冲突攻击 <https://learncryptography.com/hash-functions/hash-collision-attack>`__

案例
----

access_control.sol
~~~~~~~~~~~~~~~~~~

::

   /*
    * @author: Steve Marx
    */

   pragma solidity ^0.5.0;

   import "./ECDSA.sol";

   contract AccessControl {
       using ECDSA for bytes32;
       mapping(address => bool) isAdmin;
       mapping(address => bool) isRegularUser;
       // Add admins and regular users.
       function addUsers(
           address[] calldata admins,
           address[] calldata regularUsers,
           bytes calldata signature
       )
           external
       {
           if (!isAdmin[msg.sender]) {
               // Allow calls to be relayed with an admin's signature.
               bytes32 hash = keccak256(abi.encodePacked(admins, regularUsers));
               address signer = hash.toEthSignedMessageHash().recover(signature);
               require(isAdmin[signer], "Only admins can add users.");
           }
           for (uint256 i = 0; i < admins.length; i++) {
               isAdmin[admins[i]] = true;
           }
           for (uint256 i = 0; i < regularUsers.length; i++) {
               isRegularUser[regularUsers[i]] = true;
           }
       }
   }

access_control_fixed_1.sol
~~~~~~~~~~~~~~~~~~~~~~~~~~

::

   /*
    * @author: Steve Marx
    * Modified by Kaden Zipfel
    */

   pragma solidity ^0.5.0;

   import "./ECDSA.sol";

   contract AccessControl {
       using ECDSA for bytes32;
       mapping(address => bool) isAdmin;
       mapping(address => bool) isRegularUser;
       // Add a single user, either an admin or regular user.
       function addUser(
           address user,
           bool admin,
           bytes calldata signature
       )
           external
       {
           if (!isAdmin[msg.sender]) {
               // Allow calls to be relayed with an admin's signature.
               bytes32 hash = keccak256(abi.encodePacked(user));
               address signer = hash.toEthSignedMessageHash().recover(signature);
               require(isAdmin[signer], "Only admins can add users.");
           }
           if (admin) {
               isAdmin[user] = true;
           } else {
               isRegularUser[user] = true;
           }
       }
   }

access_control_fixed_2.sol
~~~~~~~~~~~~~~~~~~~~~~~~~~

::

   /*
    * @author: Steve Marx
    * Modified by Kaden Zipfel
    */

   pragma solidity ^0.5.0;

   import "./ECDSA.sol";

   contract AccessControl {
       using ECDSA for bytes32;
       mapping(address => bool) isAdmin;
       mapping(address => bool) isRegularUser;
       // Add admins and regular users.
       function addUsers(
           // Use fixed length arrays.
           address[3] calldata admins,
           address[3] calldata regularUsers,
           bytes calldata signature
       )
           external
       {
           if (!isAdmin[msg.sender]) {
               // Allow calls to be relayed with an admin's signature.
               bytes32 hash = keccak256(abi.encodePacked(admins, regularUsers));
               address signer = hash.toEthSignedMessageHash().recover(signature);
               require(isAdmin[signer], "Only admins can add users.");
           }
           for (uint256 i = 0; i < admins.length; i++) {
               isAdmin[admins[i]] = true;
           }
           for (uint256 i = 0; i < regularUsers.length; i++) {
               isRegularUser[regularUsers[i]] = true;
           }
       }
   }
