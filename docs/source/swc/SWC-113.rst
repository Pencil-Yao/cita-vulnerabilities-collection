SWC-113
========

标题
----

SWC-113 失败调用引发的DoS攻击（DoS with Failed Call）

漏洞等级
--------

中

描述
----

外部调用会偶然或故意失败，从而引发合约出现
DoS。为了最大程度地减少此类失败造成的损害，最好将每个外部调用隔离到自己的交易中，该交易可以由调用的接收者发起。特别是与支付相关的情况，最好让用户提取资金，而不是自动将资金推送到他们（这也减少了gas
limit出现问题的机会）。

CWE漏洞分类
-----------

`CWE-703：不当处理特殊情况 <https://cwe.mitre.org/data/definitions/703.html>`__

修改建议
--------

建议遵循调用合约的最佳做法：

-  避免在单一交易中合并多个调用，尤其是当调用作为循环的一部分执行时
-  始终假设外部调用可能失败
-  实现失败调用的处理逻辑

参考链接
--------

-  `智能合约最佳实践 - Favor pull over push for external
   calls <https://consensys.github.io/smart-contract-best-practices/development-recommendations/general/external-calls/#favor-pull-over-push-for-external-calls>`__

案例
----

send_loop.sol
~~~~~~~~~~~~~

::

   /*
    * @source: https://consensys.github.io/smart-contract-best-practices/known_attacks/#dos-with-unexpected-revert
    * @author: ConsenSys Diligence
    * Modified by Bernhard Mueller
    */

   pragma solidity 0.4.24;

   contract Refunder {
       
   address[] private refundAddresses;
   mapping (address => uint) public refunds;

       constructor() {
           refundAddresses.push(0x79B483371E87d664cd39491b5F06250165e4b184);
           refundAddresses.push(0x79B483371E87d664cd39491b5F06250165e4b185);
       }

       // bad
       function refundAll() public {
           for(uint x; x < refundAddresses.length; x++) { // arbitrary length iteration based on how many addresses participated
               require(refundAddresses[x].send(refunds[refundAddresses[x]])); // doubly bad, now a single failure on send will hold up all funds
           }
       }

   }
