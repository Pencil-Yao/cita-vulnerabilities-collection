SWC-100 Function Default Visibility
========

标题
----

SWC-100 未声明函数可见性（Function Default Visibility）

漏洞等级
--------

高

描述
----

没有指定可见性（Visibility）类型的函数其可见性默认为public。如果开发人员忘记设置函数的可见性，并且恶意用户能够进行未经授权或意外的状态更改，则可能导致漏洞。

CWE漏洞分类
-----------

`CWE-710:
未遵循正确的编码规范 <https://cwe.mitre.org/data/definitions/710.html>`__

修改建议
--------

函数可被指定为 external，public，internal 或
private。建议有意识选择合适的可见性类型，这可以大大减少合约系统的攻击面。

参考链接
--------

-  `以太坊智能合约最佳实践 -
   明确标记功能和状态变量的可见性 <https://consensys.github.io/smart-contract-best-practices/development-recommendations/solidity-specific/visibility/>`__
-  `SigmaPrime -
   可见性 <https://github.com/sigp/solidity-security-blog#visibility>`__

案例
----

visibility_not_set.sol
~~~~~~~~~~~~~~~~~~~~~~

::

   /*
    * @source: https://github.com/sigp/solidity-security-blog#visibility
    * @author: SigmaPrime 
    * Modified by Gerhard Wagner
    */

   pragma solidity ^0.4.24;

   contract HashForEther {

       function withdrawWinnings() {
           // Winner if the last 8 hex characters of the address are 0. 
           require(uint32(msg.sender) == 0);
           _sendWinnings();
        }

        function _sendWinnings() {
            msg.sender.transfer(this.balance);
        }
   }

注释
^^^^

第 11 和 17 行的函数声明没有设置函数的可见性。至少对于 Solidity 0.4.24
版本（\ ``pragma`` 语句中指定的），这意味着它们将默认被视为
``public``\ 。这就允许任何人调用 ``_sendWinings()``\ 函数并拿走代币。

相反，下面的修复版本将
``_sendWinnings()``\ 函数的可见性限制为\ ``internal``\ ，因此，它只能由
``WithdrawWinnings()``
函数激活，该函数会强制检查发送者是否满足收到代币的假定条件。

visibility_not_set_fixed.sol
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

::

   /*
    * @source: https://github.com/sigp/solidity-security-blog#visibility
    * @author: SigmaPrime
    * Modified by Gerhard Wagner
    */

   pragma solidity ^0.4.24;

   contract HashForEther {

       function withdrawWinnings() public {
           // Winner if the last 8 hex characters of the address are 0.
           require(uint32(msg.sender) == 0);
           _sendWinnings();
        }

        function _sendWinnings() internal{
            msg.sender.transfer(this.balance);
        }
   }
