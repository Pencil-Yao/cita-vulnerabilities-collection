SWC-127
========

标题
----

SWC-127 函数类型变量任意跳转（Arbitrary Jump with Function Type
Variable）

漏洞等级
--------

低

描述
----

Solidity支持函数类型变量。也就是说，一个函数类型的变量可以赋值给具有匹配签名的函数的引用。保存到此类变量的函数可以像常规函数一样调用。

当用户具有任意更改函数类型变量并执行随机代码指令的能力时，就会出现问题。由于Solidity不支持指针算术，因此无法将此类变量更改为任意值。但是，如果开发人员使用汇编指令（例如\ ``mstore``\ 或赋值运算符），则在最坏的情况下，攻击者能够将函数类型变量指向任何代码指令，从而违反了所需的验证和所需的状态更改。

CWE漏洞分类
-----------

`CWE-695：使用底层功能 <https://cwe.mitre.org/data/definitions/695.html>`__

修改建议
--------

The use of assembly should be minimal. A developer should not allow a
user to assign arbitrary values to function type variables.

应尽可能少使用汇编代码。开发人员不应允许用户为函数类型变量分配任意值。

参考链接
--------

-  `Solidity
   CFT <https://medium.com/authio/solidity-ctf-part-2-safe-execution-ad6ded20e042>`__
-  `Solidity文档 -
   Solidity汇编 <https://solidity.readthedocs.io/en/v0.4.25/assembly.html>`__
-  `Solidity文档 -
   函数类型 <https://solidity.readthedocs.io/en/v0.4.25/types.html#function-types>`__

案例
----

FunctionTypes.sol
~~~~~~~~~~~~~~~~~

::

   /*
    * @source: https://gist.github.com/wadeAlexC/7a18de852693b3f890560ab6a211a2b8
    * @author: Alexander Wade
    */

   pragma solidity ^0.4.25;

   contract FunctionTypes {
       
       constructor() public payable { require(msg.value != 0); }
       
       function withdraw() private {
           require(msg.value == 0, 'dont send funds!');
           address(msg.sender).transfer(address(this).balance);
       }
       
       function frwd() internal
           { withdraw(); }
           
       struct Func { function () internal f; }
       
       function breakIt() public payable {
           require(msg.value != 0, 'send funds!');
           Func memory func;
           func.f = frwd;
           assembly { mstore(func, add(mload(func), callvalue)) }
           func.f();
       }
   }
