Z-07 NonReentrant Function Calls NonReentrant
Function
========

标题
----

Z07 非重入函数调用非重入函数（NonReentrant Function Calls NonReentrant
Function）

漏洞等级
--------

高

描述
----

在合约中，带有重入保护 modifier 的函数 A 调用带有重入保护 modifier
的函数 B，这将导致函数 B 的逻辑执行失败。

修改建议
--------

建议将函数 A 调用函数 B 的部分作为无重入保护的内部函数 C 来实现。这样，A
和 B 都可以调用 C 来实现之前的逻辑。

案例
----

FunctionCallWithinContractIncorrect_Issue.sol
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

::

   pragma solidity ^0.8.0;

   contract Test {
       address public owner;
       mapping(address => bool) public whitelist;

       constructor() {
           owner = msg.sender;
       }

       modifier onlyOwner() {
           require(msg.sender == owner, "sender should be owner");
           _;
       }

       function setWhiteList(address a) external onlyOwner {
           whitelist[a] = true;
       }

       function called1(address payable recipient, uint256 num) public {
           if (whitelist[recipient]) {
               num += 10;
           }
           recipient.call{value: num}("");
       }

       function bad1(address payable recipient, uint256 num) external payable {
           require(msg.value >= num, "insufficient ether");
           called1(recipient, num); //leak
       }

       function called2(address payable recipient, uint256 num) internal {
           if (whitelist[recipient]) {
               num += 10;
           }
           recipient.call{value: num}("");
       }

       function good1(address payable recipient, uint256 num) external payable {
           require(msg.value >= num, "insufficient ether");
           called2(recipient, num);
       }

       function called3(address payable recipient, uint256 num) private {
           if (whitelist[recipient]) {
               num += 10;
           }
           recipient.call{value: num}("");
       }

       function good2(address payable recipient, uint256 num) external payable {
           require(msg.value >= num, "insufficient ether");
           called3(recipient, num);
       }

       function _msgSender() internal view virtual returns (address) {
           return msg.sender;
       }

       function ownerWho() public view virtual returns (address) {
           return owner;
       }

       modifier onlyOwner1() {
           require(ownerWho() == _msgSender(), "caller is not the owner");
           _;
       }

       function good3(
           address payable recipient,
           uint256 num
       ) external payable onlyOwner1 {
           require(msg.value >= num, "insufficient ether");
           recipient.call{value: num}("");
       }

       function bad2(address payable recipient, uint256 num) external payable {
           require(msg.value >= num, "insufficient ether");
           require(ownerWho() == _msgSender(), "caller is not the owner"); //leak
           recipient.call{value: num}("");
       }
   }

NonReentrancyFuncCalledNonReentrancyFunc_Issue.sol
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

::

   pragma solidity ^0.8.0;

   abstract contract ReentrancyGuard {
       uint256 private constant _NOT_ENTERED = 1;
       uint256 private constant _ENTERED = 2;

       uint256 private _status;

       constructor() {
           _status = _NOT_ENTERED;
       }

       modifier nonReentrant() {
           require(_status != _ENTERED, "reentrant call");

           _status = _ENTERED;

           _;

           _status = _NOT_ENTERED;
       }
   }

   contract Test is ReentrancyGuard {
       constructor() {}

       function called1(
           address payable recipient,
           uint256 num
       ) public nonReentrant {
           recipient.call{value: num}("");
       }

       function bad1(
           address payable[] memory recipients,
           uint256[] memory num
       ) external nonReentrant {
           require(num.length == recipients.length, "inconsistent length");
           for (uint i; i < recipients.length; i++) {
               called1(recipients[i], num[i]); //leak
           }
       }

       function called2(address payable recipient, uint256 num) internal {
           recipient.call{value: num}("");
       }

       function good(
           address payable[] memory recipients,
           uint256[] memory num
       ) external nonReentrant {
           require(num.length == recipients.length, "inconsistent length");
           for (uint i; i < recipients.length; i++) {
               called2(recipients[i], num[i]);
           }
       }

       function called4(
           address payable recipient,
           uint256 num
       ) public nonReentrant {
           recipient.call{value: num}("");
       }

       function called3(address payable recipient, uint256 num) public {
           called4(recipient, num); //leak
       }

       function bad2(
           address payable[] memory recipients,
           uint256[] memory num
       ) external nonReentrant {
           require(num.length == recipients.length, "inconsistent length");
           for (uint i; i < recipients.length; i++) {
               called3(recipients[i], num[i]);
           }
       }
   }
