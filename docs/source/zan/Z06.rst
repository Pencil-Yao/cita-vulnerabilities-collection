Z-06 Division Before Multiplication
========

标题
----

Z06 先除法后乘法（Division Before Multiplication）

漏洞等级
--------

高

描述
----

Solidity
只对整数进行运算。因此，如果在乘法之前进行除法运算，四舍五入的误差会大大增加。

修改建议
--------

建议先进行乘法运算，再进行除法运算，以避免精度损失。

案例
----

DivBeforeMul_Issue.sol
~~~~~~~~~~~~~~~~~~~~~~

::

   pragma solidity 0.4.24;

   library SafeMath {
       function mul(uint256 a, uint256 b) internal constant returns (uint256) {
           uint256 c = a * b;
           assert(a == 0 || c / a == b);
           return c;
       }

       function div(uint256 a, uint256 b) internal constant returns (uint256) {
           // assert(b > 0); // Solidity automatically throws when dividing by 0
           uint256 c = a / b;
           // assert(a == b * c + a % b); // There is no case in which this doesn't hold
           return c;
       }
   }

   contract Test {
       using SafeMath for uint256;

       uint a1 = 1;
       uint a2 = 2;
       uint a3 = 3;

       function bad0() returns (uint) {
           uint a = (a1 / a2) * a3; //leak
           return a;
       }

       function bad1() {
           if (a1 * (a2 / a3) >= 1) { //leak
               //do something
           }
       }

       function bad2() {
           uint a = (a1.div(a2)).mul(a3); //leak
       }

       function bad3() {
           if (a1.mul(a2 / a3) >= 1) { //leak
               //do something
           }
       }

       function good0() {
           uint a = (a1 * a3) / a2;
       }

       function good1() {
           if ((a1 * a2) / a3 >= 1) {
               //do something
           }
       }

       function good2() {
           uint a = a1.mul(a3).div(a2);
       }

       function good3() {
           if ((a1.mul(a2)) / a3 >= 1) {}
       }
   }
