Z-08 delegatecall used inside a loop
========

标题
----

Z08 在循环内使用的delegatecall（delegatecall used inside a loop）

漏洞等级
--------

中

描述
----

``payable`` 函数通过 ``delegatecall``
在循环中调用另一个函数。如果被调用的函数是 ``payable`` 函数，并且使用了
``msg.value``\ ，可能会出现一些意想不到的行为。

修改建议
--------

建议仔细检查 ``delegatecall`` 调用的函数，确保它不是 ``payable``
函数或没有使用 ``msg.value``\ 。

案例
----

DelegateCallInLoop_Issue.sol
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

::

   pragma solidity ^0.8.0;

   contract Test {
       mapping(address => uint256) balances;

       function addBalance(address a) public payable {
           balances[a] += msg.value;
       }

       function bad1(address[] memory receivers) public payable {
           for (uint256 i = 0; i < receivers.length; i++) {
               address(this).delegatecall(
                   abi.encodeWithSignature("addBalance(address)", receivers[i])
               ); //leak
           }
       }

       function bad2(address[] memory receivers) public payable {
           bad2_internal(receivers);
       }

       function bad2_internal(address[] memory receivers) internal {
           for (uint256 i = 0; i < receivers.length; i++) {
               address(this).delegatecall(
                   abi.encodeWithSignature("addBalance(address)", receivers[i])
               ); //leak
           }
       }

       function bad3(address[] memory receivers) public payable {
           for (uint256 i = 0; i < receivers.length; i++) {
               for (uint256 j = 0; j < receivers.length; j++) {
                   address(this).delegatecall(
                       abi.encodeWithSignature("addBalance(address)", receivers[i])
                   ); //leak
               }
           }
       }

       function bad4(address[] memory receivers) public payable {
           for (uint256 i = 0; i < receivers.length; i++) {
               bad4_internal(receivers[i]);
           }
       }

       function bad4_internal(address receiver) internal {
           address(this).delegatecall(
               abi.encodeWithSignature("addBalance(address)", receiver)
           ); //leak
       }
   }
